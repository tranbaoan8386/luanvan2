const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const User = require('../models/User')
const Role = require('../models/Role')
const ErrorResponse = require('../response/ErrorResponse')
const ApiResponse = require('../response/ApiResponse')
const generateOtp = require('../utils/generateOtp')
const RegisterOtp = require('../models/mongo/RegisterOtp')
const EmailService = require('../services/EmailService')
const ForgotToken = require('../models/mongo/ForgotToken')
const randomBytes = require('../utils/randomBytes')
const { env } = require('../config/env')
class AuthController {
   
    async register(req, res, next) {
        try {
            const { name, email, password } = req.body;
    
            // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
            const isExistEmail = await User.findOne({
                where: { email }
            });
    
            if (isExistEmail) {
                return ApiResponse.error(res, {
                    status: 400,
                    data: {
                        email: 'Email ƒë√£ t·ªìn t·∫°i'
                    }
                });
            }
    
            // BƒÉm m·∫≠t kh·∫©u v·ªõi salt 10 rounds
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash(password, salt);
    
            // T·∫°o t√†i kho·∫£n m·ªõi
            const user = await User.create({
                name,
                email,
                password: hashedPassword,
                roleId: 2
            });
    
            // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
            return ApiResponse.success(res, {
                status: 201,
                data: {
                    message: 'ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng',
                    user
                }
            });
    
        } catch (err) {
            console.error('‚ùå L·ªói t·∫°i register:', err);
            next(err);
        }
    }
    

   
    async login(req, res, next) {
        try {
        const { email, password } = req.body;

        // ‚úÖ L·∫•y user k√®m role
        const user = await User.findOne({
            where: { email },
            include: {
    model: Role,
    as: 'role',
    attributes: ['id', 'name'] // ‚úÖ Ch·ªâ l·∫•y c√°c c·ªôt c√≥ th·∫≠t
    }

        });

        if (!user) {
            return ApiResponse.error(res, {
            status: 401,
            data: {
                message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
            }
            });
        }

        if (!user.isActive) {
            return ApiResponse.error(res, {
            status: 403,
            data: {
                message: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
            }
            });
        }

        const isMatchPassword = bcrypt.compareSync(password, user.password);
        if (!isMatchPassword) {
            return ApiResponse.error(res, {
            status: 400,
            data: {
                password: 'M·∫≠t kh·∫©u ch∆∞a ch√≠nh x√°c'
            }
            });
        }

        // ‚úÖ Token ch·ª©a ID
        const token = jwt.sign(
            {
            id: user.id
            },
            env.SECRET_KEY,
            {
            expiresIn: '5d'
            }
        );

        // ‚úÖ Tr·∫£ v·ªÅ role ƒë·∫ßy ƒë·ªß
        const userFinal = {
            id: user.id,
            name: user.name,
            email: user.email,
            avatar: user.avatar,
            role: user.role // üëà Tr·∫£ v·ªÅ object: { id, name }
        };

        return ApiResponse.success(res, {
            status: 200,
            data: {
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            user: userFinal,
            token
            }
        });
        } catch (err) {
        console.error('üî• L·ªói trong login():', err); // ‚úÖ In log r√µ r√†ng
        next(err);
        }
    }


    async verifyOtp(req, res, next) {
        try {
            const { otp, email } = req.body

            const user = await RegisterOtp.findOne({ email })
            if (!user) {
                throw new ErrorResponse(404, 'M√£ x√°c th·ª±c kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n')
            }
            if (user.otp !== otp) {
                throw new ErrorResponse(401, 'M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng')
            }

            await Promise.all([
                User.update(
                    {
                        verified: true
                    },
                    {
                        where: {
                            email
                        }
                    }
                ),
                RegisterOtp.deleteOne({ email })
            ])

            return new ApiResponse(res, {
                status: 200,
                message: 'X√°c th·ª±c th√†nh c√¥ng'
            })
        } catch (err) {
            next(err)
        }
    }

    async resendOtp(req, res, next) {
        try {
            const { email } = req.body
            await RegisterOtp.deleteOne({ email })

            // G·ª≠i l·∫°i m√£
            const otp = generateOtp()
            const registerOtp = new RegisterOtp({
                email,
                otp
            })
            await Promise.all([
                registerOtp.save()
                // G·ª≠i email
                // EmailService.sendMail({
                //     to: email,
                //     subject: 'Y√™u c·∫ßu g·ª≠i l·∫°i m√£ x√°c th·ª±c',
                //     html: `M√£ x√°c th·ª±c m·ªõi c·ªßa b·∫°n l√†: ${otp}`
                // })
            ])
            return new ApiResponse(res, {
                status: 200,
                message: 'G·ª≠i l·∫°i m√£ x√°c th·ª±c th√†nh c√¥ng'
            })
        } catch (err) {
            next(err)
        }
    }

    async forgotPassword(req, res, next) {
  try {
    const { email } = req.body;

    const user = await User.findOne({ where: { email } });
    console.log(`K·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi d√πng: ${user}`);

    if (!user) {
      throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
    }

    // üîÑ N·∫øu ƒë√£ t·ªìn t·∫°i token ‚Üí x√≥a ƒëi ƒë·ªÉ t·∫°o m·ªõi
    const existedToken = await ForgotToken.findOne({ email });
    console.log(`K·∫øt qu·∫£ ki·ªÉm tra token hi·ªán t·∫°i: ${existedToken}`);

    if (existedToken) {
      await ForgotToken.deleteOne({ email }); // ‚úÖ X√ìA token c≈©
      console.log('ƒê√£ x√≥a token c≈© ƒë·ªÉ t·∫°o m·ªõi.');
    }

    // ‚úÖ T·∫°o m√£ x√°c nh·∫≠n g·ªìm 4 ch·ªØ s·ªë
    const code = Math.floor(1000 + Math.random() * 9000);
    console.log(`M√£ x√°c nh·∫≠n ƒë√£ t·∫°o: ${code}`);

    const forgotToken = new ForgotToken({
      email,
      token: code,
      expires: Date.now() + 3600000 // 1 gi·ªù
    });

    const message = `M√£ x√°c nh·∫≠n c·ªßa b·∫°n l√†: ${code}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.`;
    console.log(`Th√¥ng b√°o kh√¥i ph·ª•c m·∫≠t kh·∫©u: ${message}`);

    await forgotToken.save();

    await EmailService.sendMail(user.email, "M√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u", `<p>${message}</p>`);

    console.log('Email ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† m√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.');

    return res.status(200).json({
      status: 200,
      message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u'
    });
  } catch (err) {
    console.error('L·ªói trong forgotPassword:', err);

    if (err.message && err.message.includes('invalid_client')) {
      return res.status(401).json({
        success: false,
        message: 'Th√¥ng tin x√°c th·ª±c c·ªßa d·ªãch v·ª• email kh√¥ng h·ª£p l·ªá'
      });
    }

    next(err);
  }
}



    async verifyForgotToken(req, res, next) {
        try {
            const { token } = req.body
            const existedToken = await ForgotToken.findOne({ token })
            if (!existedToken) {
                throw new ErrorResponse(404, 'Token kh√¥ng t·ªìn t·∫°i')
            }
            return new ApiResponse(res, {
                status: 200,
                message: 'X√°c th·ª±c th√†nh c√¥ng'
            })
        } catch (err) {
            next(err)
        }
    }

    async resetPasswords(req, res, next) {
        try {
            const { token, newPassword } = req.body;
            console.log(`Nh·∫≠n y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u v·ªõi m√£ x√°c nh·∫≠n: ${token}`);

            // T√¨m ki·∫øm m√£ x√°c nh·∫≠n trong c∆° s·ªü d·ªØ li·ªáu
            const forgotToken = await ForgotToken.findOne({ token });
            console.log(`K·∫øt qu·∫£ t√¨m ki·∫øm m√£ x√°c nh·∫≠n: ${forgotToken}`);

            if (!forgotToken) {
                throw new ErrorResponse(400, 'M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
            }

            if (forgotToken.expires < Date.now()) {
                throw new ErrorResponse(400, 'M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n');
            }

            const user = await User.findOne({ where: { email: forgotToken.email } });
            console.log(`K·∫øt qu·∫£ t√¨m ki·∫øm ng∆∞·ªùi d√πng: ${user}`);

            if (!user) {
                throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
            }

            // M√£ x√°c nh·∫≠n h·ª£p l·ªá, c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
            const salt = await bcrypt.genSalt(parseInt(process.env.BCRYPT_SALT_ROUND));
            const hashedPassword = await bcrypt.hash(newPassword, salt);

            user.password = hashedPassword;
            await user.save();

            // X√≥a m√£ x√°c nh·∫≠n sau khi s·ª≠ d·ª•ng
            await ForgotToken.deleteOne({ token });

            console.log('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.');

            return res.status(200).json({ message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng' });
        } catch (err) {
            console.error('L·ªói trong resetPassword:', err);
            next(err);
        }
    }

    async resendForgotToken(req, res, next) {
        try {
            const { email } = req.body
            await ForgotToken.deleteOne({ email })

            const user = await User.findOne({
                where: { email }
            })
            if (!user) {
                throw new ErrorResponse(404, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng')
            }

            // T·∫°o token
            const token = randomBytes(32)
            const forgotToken = new ForgotToken({
                email,
                token
            })

            const link = `${env.CLIENT_URL}/forgot-password/${token}`

            await Promise.all([
                forgotToken.save()
                // G·ª≠i email
                // EmailService.sendMail({
                //     to: email,
                //     subject: 'Y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u',
                //     html: `<h1> CLick <a href="${link}">Here</a> to reset password!</h1>`
                // })
            ])

            return new ApiResponse(res, {
                status: 200,
                message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ kh√¥i ph·ª•c m·∫≠t kh·∫©u'
            })
        } catch (err) {
            next(err)
        }
    }
}

module.exports = new AuthController()
