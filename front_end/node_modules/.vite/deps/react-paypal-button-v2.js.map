{
  "version": 3,
  "sources": ["../../react-paypal-button-v2/src/index.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\ndeclare global {\n    interface Window { paypal: any }\n}\n\nexport interface PayPalButtonProps {\n    amount?: number|string,\n    currency?: number|string,\n    shippingPreference?: \"NO_SHIPPING\" | \"GET_FROM_FILE\" | \"SET_PROVIDED_ADDRESS\",\n    onSuccess?: Function,\n    catchError?: Function,\n    onError?: Function,\n    createOrder?: Function,\n    createSubscription?: Function,\n    onApprove?: Function,\n    style?: object,\n    options?: PaypalOptions,\n    onButtonReady?: Function,\n}\n\nexport interface PayPalButtonState {\n    isSdkReady: boolean\n}\n\nexport interface PaypalOptions {\n    clientId?: string,\n    merchantId?: string,\n    currency?: number|string,\n    intent?: string,\n    commit?: boolean|string,\n    vault?: boolean|string,\n    component?: string,\n    disableFunding?: string,\n    disableCard?: string,\n    integrationDate?: string,\n    locale?: string,\n    buyerCountry?: string,\n    debug?: boolean|string\n}\n\nclass PayPalButton extends React.Component<PayPalButtonProps, PayPalButtonState> {\n    static propTypes = {\n        amount: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n        ]),\n        currency: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n        ]),\n        shippingPreference: PropTypes.string,\n        onSuccess: PropTypes.func,\n        catchError: PropTypes.func,\n        onError: PropTypes.func,\n        createOrder: PropTypes.func,\n        createSubscription: PropTypes.func,\n        onApprove: PropTypes.func,\n        style: PropTypes.object,\n        options: PropTypes.shape({\n            clientId: PropTypes.string,\n            merchantId: PropTypes.string,\n            currency: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n            ]),\n            intent: PropTypes.string,\n            commit: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ]),\n            vault: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ]),\n            component: PropTypes.string,\n            disableFunding: PropTypes.string,\n            disableCard: PropTypes.string,\n            integrationDate: PropTypes.string,\n            locale: PropTypes.string,\n            buyerCountry: PropTypes.string,\n            debug: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ])\n        }),\n        onButtonReady: PropTypes.func,\n    }\n\n    static defaultProps = {\n        style: {},\n        options: {\n            clientId: \"sb\",\n            currency: \"USD\"\n        },\n        shippingPreference: \"GET_FROM_FILE\",\n    }\n\n    constructor(props: PayPalButtonProps) {\n        super(props);\n\n        this.state = {\n            isSdkReady: false,\n        };\n    }\n\n    componentDidMount() {\n        if (\n            typeof window !== \"undefined\" &&\n            window !== undefined &&\n            window.paypal === undefined\n        ) {\n            this.addPaypalSdk();\n        }\n        else if (\n            typeof window !== \"undefined\" &&\n            window !== undefined &&\n            window.paypal !== undefined &&\n            this.props.onButtonReady\n        ) {\n            this.props.onButtonReady();\n        }\n    }\n\n    createOrder(data: any, actions: any) {\n\n        const { currency, options, amount, shippingPreference } = this.props;\n\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: currency\n                  ? currency\n                  : options && options.currency\n                  ? options.currency\n                  : \"USD\",\n                value: amount.toString()\n              }\n            }\n          ],\n          application_context: {\n            shipping_preference: shippingPreference\n          }\n        });\n    }\n\n    onApprove(data: any, actions: any) {\n        return actions.order\n            .capture()\n            .then((details) => {\n                if (this.props.onSuccess) {\n                    return this.props.onSuccess(details, data);\n                }\n            })\n            .catch((err) => {\n                if (this.props.catchError) {\n                    return this.props.catchError(err);\n                }\n            });\n    }\n\n    render() {\n        const {\n            amount,\n            onSuccess,\n            createOrder,\n            createSubscription,\n            onApprove,\n            style,\n        } = this.props;\n        const { isSdkReady } = this.state;\n\n        if (\n            !isSdkReady &&\n            (typeof window === \"undefined\" || window.paypal === undefined)\n        ) {\n            return null;\n        }\n\n        const Button = window.paypal.Buttons.driver(\"react\", {\n            React,\n            ReactDOM,\n        });\n\n        const createOrderFn =\n            amount && !createOrder\n                ? (data: any, actions: any) => this.createOrder(data, actions)\n                : (data: any, actions: any) => createOrder(data, actions);\n\n        return (\n            <Button\n                {...this.props}\n                createOrder={createSubscription ? undefined : createOrderFn}\n                createSubscription={createSubscription}\n                onApprove={\n                    onSuccess\n                        ? (data: any, actions: any) => this.onApprove(data, actions)\n                        : (data: any, actions: any) => onApprove(data, actions)\n                }\n                style={style}\n            />\n        );\n    }\n\n    private addPaypalSdk() {\n        const { options, onButtonReady } = this.props;\n        const queryParams: string[] = [];\n\n        // replacing camelCase with dashes\n        Object.keys(options).forEach(k => {\n            const name = k.split(/(?=[A-Z])/).join(\"-\").toLowerCase();\n            queryParams.push(`${name}=${options[k]}`);\n        });\n\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = `https://www.paypal.com/sdk/js?${queryParams.join(\"&\")}`;\n        script.async = true;\n        script.onload = () => {\n            this.setState({ isSdkReady: true });\n\n            if (onButtonReady) {\n                onButtonReady();\n            }\n        };\n        script.onerror = () => {\n            throw new Error(\"Paypal SDK could not be loaded.\");\n        };\n    \n        document.body.appendChild(script);\n    }\n}\n\nexport { PayPalButton };\n"],
  "mappings": "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",
  "names": ["PayPalButton", "props", "state", "isSdkReady", "window", "undefined", "paypal", "addPaypalSdk", "onButtonReady", "data", "actions", "currency", "options", "amount", "shippingPreference", "order", "create", "purchase_units", "currency_code", "value", "toString", "application_context", "shipping_preference", "capture", "then", "details", "onSuccess", "err", "catchError", "createOrder", "createSubscription", "onApprove", "style", "Button", "Buttons", "driver", "React", "ReactDOM", "createOrderFn", "queryParams", "Object", "keys", "forEach", "k", "name", "split", "join", "toLowerCase", "push", "script", "document", "createElement", "type", "src", "async", "onload", "setState", "onerror", "Error", "body", "appendChild", "Component", "PropTypes", "oneOfType", "number", "string", "func", "onError", "object", "shape", "clientId", "merchantId", "intent", "commit", "bool", "vault", "component", "disableFunding", "disableCard", "integrationDate", "locale", "buyerCountry", "debug"]
}
