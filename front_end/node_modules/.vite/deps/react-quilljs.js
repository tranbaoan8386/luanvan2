import {
  require_quill
} from "./chunk-425DVTCV.js";
import {
  require_react
} from "./chunk-ZMLY2J2T.js";
import {
  __toESM
} from "./chunk-4B2QHNJT.js";

// node_modules/react-quilljs/esm/index.js
var import_react = __toESM(require_react());
var theme = "snow";
var modules = {
  toolbar: [
    ["bold", "italic", "underline", "strike"],
    [{ align: [] }],
    [{ list: "ordered" }, { list: "bullet" }],
    [{ indent: "-1" }, { indent: "+1" }],
    [{ size: ["small", false, "large", "huge"] }],
    [{ header: [1, 2, 3, 4, 5, 6, false] }],
    ["link", "image", "video"],
    [{ color: [] }, { background: [] }],
    ["clean"]
  ],
  clipboard: {
    matchVisual: false
  }
};
var formats = [
  "bold",
  "italic",
  "underline",
  "strike",
  "align",
  "list",
  "indent",
  "size",
  "header",
  "link",
  "image",
  "video",
  "color",
  "background",
  "clean"
];
function assign(target, _varArgs) {
  "use strict";
  if (target === null || target === void 0) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  var to = Object(target);
  for (var index = 1; index < arguments.length; index++) {
    var nextSource = arguments[index];
    if (nextSource !== null && nextSource !== void 0) {
      for (var nextKey in nextSource) {
        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
          to[nextKey] = nextSource[nextKey];
        }
      }
    }
  }
  return to;
}
var useQuill = function(options) {
  if (options === void 0) {
    options = { theme, modules, formats };
  }
  var quillRef = (0, import_react.useRef)();
  var _a = (0, import_react.useState)(false), isLoaded = _a[0], setIsLoaded = _a[1];
  var _b = (0, import_react.useState)({
    Quill: void 0,
    quillRef,
    quill: void 0,
    editorRef: quillRef,
    editor: void 0
  }), obj = _b[0], setObj = _b[1];
  (0, import_react.useEffect)(function() {
    if (!obj.Quill) {
      setObj(function(prev) {
        return assign(prev, { Quill: require_quill() });
      });
    }
    if (obj.Quill && !obj.quill && quillRef && quillRef.current && isLoaded) {
      var opts = assign(options, {
        modules: assign(modules, options.modules),
        formats: options.formats || formats,
        theme: options.theme || theme
      });
      var quill = new obj.Quill(quillRef.current, opts);
      setObj(assign(assign({}, obj), { quill, editor: quill }));
    }
    setIsLoaded(true);
  }, [isLoaded, obj, options]);
  return obj;
};
export {
  useQuill
};
//# sourceMappingURL=react-quilljs.js.map
